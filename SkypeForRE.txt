[SkypeForRE]
setsilence false
//Enter skypeid(or email) and password below
set skypeid skypeid_here
set skypepass skypepassword_here
// Change the next line to your own website, otherwise the script will use skypeforevony.herokuapp.com to send messages in skype.
set sender skypeforevony.herokuapp.com

//Do not change below this line
import mx.rpc.http.HTTPService;
import mx.rpc.events.ResultEvent;
import mx.rpc.events.FaultEvent;
import mx.utils.ObjectUtil;
import flash.utils.Endian;
import flash.utils.ByteArray;
function int32ToHexString(n){
	hexChars = "0123456789abcdef";
	hexString = "";
	for (i=0;i<4;i++){
		hexString += hexChars.charAt((n >> (i * 8 + 4)) & 15);
		hexString += hexChars.charAt((n >> (i * 8)) & 15);
	}
	return hexString;
}
function int64Xor(a, b){
	sA = a.toString(2);
	sB = b.toString(2);
	sC = "";
	sD = "";
	diff = Math.abs(sA.length - sB.length);
	for (i=0;i<diff;i++){
		sD += "0";
	}
	if (sA.length<sB.length){
		sD += sA;
		sA = sD;
	}
    else if (sB.length<sA.length){
       	sD += sB;
       	sB = sD;
    }
    for (i=0;i<sA.length;i++){
        sC += (sA.charAt(i)==sB.charAt(i))?"0":"1";
    }
    return parseInt(sC, 2);
}
function cS64(pdwData, pInHash){
    MODULUS = 2147483647;
    CS64_a = pInHash[0] & MODULUS;
    CS64_b = pInHash[1] & MODULUS;
    CS64_c = pInHash[2] & MODULUS;
    CS64_d = pInHash[3] & MODULUS;
    CS64_e = 242854337;
    pos = 0;
    qwDatum = 0;
    qwMAC = 0;
    qwSum = 0;
    for (i=0;i<int(pdwData.length/2);i++){
        qwDatum = parseInt(pdwData[pos]);
        pos += 1;
        qwDatum = multiplymod(CS64_e,qwDatum,MODULUS);
        qwMAC += qwDatum;
        qwMAC = multiplymod(CS64_a,qwMAC,MODULUS);
        qwMAC += CS64_b;
        qwMAC = qwMAC % MODULUS;
        qwSum += qwMAC;
        qwMAC += parseInt(pdwData[pos]);
        pos += 1;
        qwMAC = multiplymod(CS64_c,qwMAC,MODULUS);
        qwMAC += CS64_d;
        qwMAC = qwMAC % MODULUS;
        qwSum += qwMAC;
    }
    qwMAC += CS64_b;
    qwMAC = qwMAC % MODULUS;
    qwSum += CS64_d;
    qwSum = qwSum % MODULUS;
    return (new Array(qwMAC, qwSum));
}
function hash(src)
{
	savedLength= src.length;
	savedEndian= src.endian;
	src.endian = Endian.BIG_ENDIAN;
	len = savedLength *8;
	while (src.length%4!=0) {
		src[src.length]=0;
	}
	src.position=0;
	a = new Array();
	for (i=0;i<src.length;i+=4) {
		a.push(src.readUnsignedInt());
	}
	hh = core(a, len);
	out = new ByteArray();
	words = 8;
	for (i=0;i<words;i++) {
		out.writeUnsignedInt(hh[i]);
	}
	src.length = savedLength;
	src.endian = savedEndian;
	return out;
}
function multiplymod(num1,num2,div){
	_num1=int(num1/65536);
	_enum1=num1%65536;
	_num2=int(num2/65536);
	_enum2=num2%65536;
	return (((((_num1*_num2*65536)%div)*65536)%div)+(_num1*65536*_enum2)+(_num2*65536*_enum1)+(_enum1*_enum2))%div;
}
function core(x,len) {
	k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
	h = new Array(0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19);
	x[len >> 5] |= 0x80 << (24 - len % 32);
	x[((len + 64 >> 9) << 4) + 15] = len;
	w = new Array();
	a = uint(h[0]);
	b = uint(h[1]);
	co = uint(h[2]);
	d = uint(h[3]);
	e = uint(h[4]);
	f = uint(h[5]);
	g = uint(h[6]);
	h = uint(h[7]);
	for (var i=0; i<x.length; i+=16) {
		olda = a;
		oldb = b;
		oldc = co;
		oldd = d;
		olde = e;
		oldf = f;
		oldg = g;
		oldh = h;
		for (j=0; j<64; j++) {
			if (j<16) {
				w[j] = x[i+j] | 0;
			} else {
				s0 = rrol(w[j-15],7)^rrol(w[j-15],18)^(w[j-15]>>>3);
				s1 = rrol(w[j-2], 17)^rrol(w[j-2],19)^(w[j-2]>>>10);
				w[j] = w[j-16] + s0 + w[j-7] + s1;
			}
			t2 = (rrol(a,2) ^ rrol(a,13) ^ rrol(a,22)) + ((a&b) ^ (a&co) ^ (b&co));
			t1 = h + (rrol(e,6) ^ rrol(e,11) ^ rrol(e,25)) + ((e&f)^(g&~e)) + k[j] + w[j]
			h = uint(g);
			g = uint(f);
			f = uint(e);
			e = uint(d + t1);
			d = uint(co);
			co = uint(b);
			b = uint(a);
			a = uint(t1 + t2);
		}
		a += olda;
		b += oldb;
		co += oldc;
		d += oldd;
		e += olde;
		f += oldf;
		g += oldg;
		h += oldh;
		a=uint(a);
		b=uint(b);
		co=uint(co);
		d=uint(d);
		e=uint(e);
		f=uint(f);
		g=uint(g);
		h=uint(h);
	}
	return (new Array(a,b,co,d,e,f,g,h));
}
function rrol(num, cnt) {
	return (num << (32-cnt)) | (num >>> cnt);
}
function HexfromArray(array) {
	s = "";
	for (i=0;i<array.length;i++) {
		s+=("0"+array[i].toString(16)).substr(-2,2);
	}
	return s;
}
function HextoString(hex) {
	a = HextoArray(hex);
	return a.readUTFBytes(a.length);
}
function HexfromString(str) {
	a = new ByteArray();
	a.writeUTFBytes(str);
	return HexfromArray(a);
}
function HextoArray(hex) {
	hex = hex.replace(/\s|:/gm,'');
	a = new ByteArray();
	if (hex.length&1==1) hex="0"+hex;
	for (i=0;i<hex.length;i+=2) {
		a[i/2] = parseInt(hex.substr(i,2),16);
	}
	return a;
}
function sha256hashfrombytearray(str){
	fg=HexfromArray(str);
	dg=HextoArray(fg);
	dg1=hash(dg);
	dg2=HexfromArray(dg1);
	return dg2;
}
function getMac256Hash(challenge){
    clearText = challenge + "msmsgs@msnmsgr.com";
    itr=8 - clearText.length % 8;
    for (i=0;i<itr;i++){
    	clearText += "0";
    }
    cchClearText = int(clearText.length/4);
    pClearText = new Array();
    for (i=0;i<cchClearText;i++){
    	pClearText.splice(i,0,0);
        for (pos=0;pos<4;pos++){
        	pClearText[i] += (clearText.charCodeAt(4 * i + pos) * (Math.pow(256,pos)));
        }
    }
    sha256Has = new Array(0, 0, 0, 0);
    uvt=new ByteArray();
    uvt.writeUTFBytes(challenge+"Q1P7W2E4J9R8U3S5");
    has = sha256hashfrombytearray(uvt).toUpperCase();
    for (i=0;i<sha256Has.length;i++){
    	sha256Has[i] = 0;
        for (pos=0;pos<4;pos++){
        	dpos = 8 * i + pos * 2;
            sha256Has[i] += (parseInt(has.substring(dpos,dpos + 2), 16) * (Math.pow(256,pos)));
        }
    }
    macHash = cS64(pClearText, sha256Has);
    macParts = new Array(macHash[0], macHash[1], macHash[0], macHash[1]);
    f1=new Array(int64Xor(sha256Has[0],macParts[0]),int64Xor(sha256Has[1],macParts[1]),int64Xor(sha256Has[2],macParts[2]),int64Xor(sha256Has[3],macParts[3]));
    f2=new Array(int32ToHexString(f1[0]),int32ToHexString(f1[1]),int32ToHexString(f1[2]),int32ToHexString(f1[3]));
    return f2.join("");
}
function getparams(){
	x=new HTTPService();
	x.addEventListener(ResultEvent.RESULT,getCallback("getppft"));
	x.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	x.url="http:/"+"/"+getVar("sender")+"/skypelogininit.php"+"?random="+(new Date().getTime());
	getCallbackVars("getppft").x=x;
	getCallbackVars("dummy").x=x;
	getCallbackVars("dummy").success=getCallback("getppft");
	x.send();
	c.cm.logMsg("Getting PPFT");
}
function getppft(v){
	x.removeEventListener(ResultEvent.RESULT,getCallback("getppft"));
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("getppft");
	setStatic("MSPOK",v.result.MSPOK);
	setStatic("MSPRequ",v.result.MSPRequ);
	setStatic("PPFT",v.result.PPFT);
	sendcreds();
}
function sendcreds(){
	x=new HTTPService();
	x.addEventListener(ResultEvent.RESULT,getCallback("handlelogin"));
	x.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=getCallback("handlelogin");
	getCallbackVars("dummy").x=x;
	getCallbackVars("handlelogin").x=x;
	x.url="http:/"+"/"+getVar("sender")+"/skypelogin.php"+"?random="+(new Date().getTime());
	x.method="POST";
	x.resultFormat="text";
	x.send({"MSPRequ":getStatic("MSPRequ"),"MSPOK":getStatic("MSPOK"),"user":getStatic("skypeid"),"pass":getStatic("skypepass"),"PPFT":getStatic("PPFT")});
	c.cm.logMsg("Sending credentials");
}
function setcall(t){
	if (getCallback(t.name)) deleteCallback(t.name);
	setCallback(t);
}
function dummy(v){
	x.removeEventListener(ResultEvent.RESULT,success);
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	deleteCallback("getppft");
	c.cm.logMsg(v);
	setVar("skypefinished",true);
}
function handlelogin(v){
	x.removeEventListener(ResultEvent.RESULT,getCallback("handlelogin"));
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("handlelogin");
	gettoken(v.result);
}
function gettoken(t){
	y=new HTTPService();
	y.url='http:/'+'/'+getVar("sender")+'/gettoken.php'+"?random="+(new Date().getTime());
	getCallbackVars("receivetoken").y=y;
	getCallbackVars("dummy").x=y;
	getCallbackVars("dummy").success=getCallback("receivetoken");
	y.method="POST";
	y.addEventListener(ResultEvent.RESULT,getCallback("receivetoken"));
	y.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	y.send({"t":t});
	c.cm.logMsg("Getting Skype token");
}
function receivetoken(v){
	y.removeEventListener(ResultEvent.RESULT,getCallback("receivetoken"));
	y.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("receivetoken");
	setStatic("skypetoken",v.result.skypetoken);
	setStatic("skypetoken_expires",v.result.expires);
	getuserid();
}
function getuserid(){
	z=new HTTPService();
	z.url='http:/'+'/'+getVar("sender")+'/getuserid.php?random='+(new Date().getTime());
	getCallbackVars("receiveuserid").z=z;
	getCallbackVars("dummy").x=z;
	getCallbackVars("dummy").success=getCallback("receiveuserid");
	z.resultFormat="text";
	z.addEventListener(ResultEvent.RESULT,getCallback("receiveuserid"));
	z.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	z.method="POST";
	z.send({"skypetoken":getStatic("skypetoken")});
	c.cm.logMsg("Getting user id");
}
function getregtoken(){
	x=new HTTPService();
	x.url='http:/'+'/'+getVar("sender")+'/getregtoken.php?random='+(new Date().getTime());
	getCallbackVars("receiveregtoken").x=x;
	getCallbackVars("dummy").x=x;
	getCallbackVars("dummy").success=getCallback("receiveregtoken");
	x.addEventListener(ResultEvent.RESULT,getCallback("receiveregtoken"));
	x.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	x.method="POST";
	secs=int((new Date().getTime())/1000);
	lockandkey="appId=msmsgs@msnmsgr.com; time="+secs+"; lockAndKeyResponse="+(getMac256Hash(secs.toString()));
	auth="skypetoken="+getStatic("skypetoken");
	x.send({"LockAndKey":lockandkey,"Authentication":auth});
	c.cm.logMsg("Getting registration token");
}
function receiveregtoken(v){
	x.removeEventListener(ResultEvent.RESULT,getCallback("receiveregtoken"));
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("receiveregtoken");
	setStatic("Skypeendpoint",v.result.endpoint);
	if (v.result.msgsHost){
		setStatic("msgsHost",v.result.msgsHost);
	}
	else{
		setStatic("msgsHost","https:/"+"/client-s.gateway.messenger.live.com/v1");
	}
	setStatic("skyperegtoken",v.result.regtoken);
	setStatic("skyperegtokenexpires",v.result.expires);
	regtokenconfig();
}
function regtokenconfig(){
	y=new HTTPService();
	y.addEventListener(ResultEvent.RESULT,getCallback("confirmconfig"));
	y.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").x=y;
	getCallbackVars("confirmconfig").y=y;
	getCallbackVars("dummy").success=getCallback("confirmconfig");
	y.url="http:/"+"/"+getVar("sender")+"/regtokenconfig.php?random="+(new Date().getTime());
	y.resultFormat="text";
	y.method="POST";
	y.send({"msgsHost":getStatic("msgsHost"),"regtoken":getStatic("skyperegtoken"),"endpoint":getStatic("Skypeendpoint")});
	c.cm.logMsg("Confirming registration token");
}
function confirmconfig(v){
	y.removeEventListener(ResultEvent.RESULT,getCallback("confirmconfig"));
	y.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("confirmconfig");
	syncendpoints();
}
function syncendpoints(){
	x=new HTTPService();
	x.url="http:/"+"/"+getVar("sender")+"/syncendpoint.php?random="+(new Date().getTime());
	x.addEventListener(ResultEvent.RESULT,getCallback("handleresponse"));
	x.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=getCallback("handleresponse");
	getCallbackVars("handleresponse").x=x;
	getCallbackVars("dummy").x=x;
	x.method="POST";
	x.resultFormat="text";
	x.send({"msgsHost":getStatic("msgsHost"),"regtoken":getStatic("skyperegtoken")});
	c.cm.logMsg("Syncing endpoints");
}
function handleresponse(v){
	x.removeEventListener(ResultEvent.RESULT,getCallback("handleresponse"));
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("handleresponse");
	ep=v.result.split('\n');
	setStatic("skypeendpoints",ep);
	setStatic("skypeloginsuccess",true);
	if (getVar("userid")&&getVar("msg")){
		sendmsg(true);
		return;
	}
	else if (getVar("skypetopic")){
		findskypeid();
		return;
	}
	setVar("skypefinished",true);
}
function receiveuserid(v){
	z.removeEventListener(ResultEvent.RESULT,getCallback("receiveuserid"));
	z.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("receiveuserid");
	setStatic("skypeuserid",v.result);
	getregtoken();
}
function sendmsg(isuser){
	if (getVar("userid")==undefined || getVar("msg")==undefined){
		setVar("skypefinished",true);
		return;
	}
	x=new HTTPService();
	x.addEventListener(ResultEvent.RESULT,getCallback("confirmsend"));
	x.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("confirmsend").x=x;
	getCallbackVars("dummy").x=x;
	getCallbackVars("dummy").success=getCallback("confirmsend");
	x.url='http:/'+'/'+getVar("sender")+'/sendmsg.php?random='+(new Date().getTime());
	x.method="POST";
	x.resultFormat="text";
	x.send({"msg":getVar("msg"),"userid":getVar("userid"),"regtoken":getStatic("skyperegtoken"),"msgsHost":getStatic("msgsHost"),"isuser":isuser});
	c.cm.logMsg("Sending message");
}
function confirmsend(v){
	x.removeEventListener(ResultEvent.RESULT,getCallback("confirmsend"));
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("confirmsend");
	setVar("skypefinished",true);
	c.cm.logMsg("Successfully sent message");
}
function findskypeid(){
	if (!(getStatic("skypeidstore"))){
		setStatic("skypeidstore",new Object());
	}
	for (p in getStatic("skypeidstore")){
		if (p.indexOf(getVar("skypetopic"))!=-1){
			setVar("userid",getStatic("skypeidstore")[p]);
			sendmsg(false);
			return;
		}
	}
	x=new HTTPService();
	x.addEventListener(ResultEvent.RESULT,getCallback("receiveskypeid"));
	x.addEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("receiveskypeid").x=x;
	getCallbackVars("dummy").success=getCallback("receiveskypeid");
	getCallbackVars("dummy").x=x;
	x.url='http:/'+'/'+getVar("sender")+'/retrieveconversations.php?random='+(new Date().getTime());
	x.method="POST";
	x.resultFormat="text";
	x.send({"msgsHost":getStatic("msgsHost"),"regtoken":getStatic("skyperegtoken"),"topic":getVar("skypetopic")});
	c.cm.logMsg("Trying to find skype id");
}
function receiveskypeid(v){
	x.removeEventListener(ResultEvent.RESULT,getCallback("receiveskypeid"));
	x.removeEventListener(FaultEvent.FAULT,getCallback("dummy"));
	getCallbackVars("dummy").success=null;
	deleteCallback("receiveskypeid");
	if (v.result==""){
		setVar("skypefinished",true);
		c.cm.logMsg("Error retrieving skype id of the group conversation");
		return;
	}
	u=v.result.split("\n\n\n");
	getStatic("skypeidstore")[u[0]]=u[1];
	setVar("userid",u[1]);
	sendmsg(false);
}
function init(){
	setVar("skypefinished",false);
	setcall(confirmsend);
	setcall(dummy);
	setcall(receiveskypeid);
	if (getStatic("skypeloginsuccess")){
		if (getVar("skypetopic")!=undefined){
			findskypeid();
			return;
		}
		sendmsg(true);
		return;
	}
	setcall(getppft);
	setcall(handlelogin);
	setcall(receiveregtoken);
	setcall(receivetoken);
	setcall(receiveuserid);
	setcall(confirmconfig);
	setcall(handleresponse);
	setStatic("skypeid",getVar("skypeid"));
	setStatic("skypepass",getVar("skypepass"));
	getparams();
}
setsilence true
set r $m_dyn.init()$
label wait
sleep .5
if {!{%skypefinished%}} goto wait
